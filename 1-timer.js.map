{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst input = document.querySelector('#datetime-picker');\nconst startBtn = document.querySelector('button[data-start]');\nconst day = document.querySelector('span[data-days]');\nconst hour = document.querySelector('span[data-hours]');\nconst minute = document.querySelector('span[data-minutes]');\nconst second = document.querySelector('span[data-seconds]');\n\nlet userSelectedDate = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    if (selectedDate <= new Date()) {\n      iziToast.error({\n        title: \"Error\",\n        message: \"Please choose a date in the future\",\n      });\n      startBtn.disabled = true;\n    } else {\n      userSelectedDate = selectedDate;\n      startBtn.disabled = false;\n    }\n  },\n};\n\nflatpickr(input, options);\n\nfunction convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction updateTimer(days, hours, minutes, seconds) {\n  day.textContent = addLeadingZero(days);\n  hour.textContent = addLeadingZero(hours);\n  minute.textContent = addLeadingZero(minutes);\n  second.textContent = addLeadingZero(seconds);\n}\n\nstartBtn.addEventListener('click', startTimer)\n\nfunction startTimer() {\n  startBtn.disabled = true;\n  input.disabled = true;\n  const timer = setInterval(() => {\n    const timeDifference = userSelectedDate - new Date();\n    \n    if (timeDifference <= 0) {\n      clearInterval(timer);\n      updateTimer(0, 0, 0, 0);\n      input.disabled = false;\n      return;\n    }\n\n    const time = convertMs(timeDifference);\n    updateTimer(time.days, time.hours, time.minutes, time.seconds);\n  }, 1000);\n}\n\n\n\n\n\n"],"names":["input","startBtn","day","hour","minute","second","userSelectedDate","options","selectedDates","selectedDate","iziToast","flatpickr","convertMs","ms","days","hours","minutes","seconds","addLeadingZero","value","updateTimer","startTimer","timer","timeDifference","time"],"mappings":"sGAMA,MAAMA,EAAQ,SAAS,cAAc,kBAAkB,EACjDC,EAAW,SAAS,cAAc,oBAAoB,EACtDC,EAAM,SAAS,cAAc,iBAAiB,EAC9CC,EAAO,SAAS,cAAc,kBAAkB,EAChDC,EAAS,SAAS,cAAc,oBAAoB,EACpDC,EAAS,SAAS,cAAc,oBAAoB,EAE1D,IAAIC,EAAmB,KAEvB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,CAAC,EAChCC,GAAgB,IAAI,MACtBC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,EACDT,EAAS,SAAW,KAEpBK,EAAmBG,EACnBR,EAAS,SAAW,GAEvB,CACH,EAEAU,EAAUX,EAAOO,CAAO,EAExB,SAASK,EAAUC,EAAI,CAMnB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CAC1C,CAEA,SAASC,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASC,EAAYN,EAAMC,EAAOC,EAASC,EAAS,CAClDf,EAAI,YAAcgB,EAAeJ,CAAI,EACrCX,EAAK,YAAce,EAAeH,CAAK,EACvCX,EAAO,YAAcc,EAAeF,CAAO,EAC3CX,EAAO,YAAca,EAAeD,CAAO,CAC7C,CAEAhB,EAAS,iBAAiB,QAASoB,CAAU,EAE7C,SAASA,GAAa,CACpBpB,EAAS,SAAW,GACpBD,EAAM,SAAW,GACjB,MAAMsB,EAAQ,YAAY,IAAM,CAC9B,MAAMC,EAAiBjB,EAAmB,IAAI,KAE9C,GAAIiB,GAAkB,EAAG,CACvB,cAAcD,CAAK,EACnBF,EAAY,EAAG,EAAG,EAAG,CAAC,EACtBpB,EAAM,SAAW,GACjB,MACD,CAED,MAAMwB,EAAOZ,EAAUW,CAAc,EACrCH,EAAYI,EAAK,KAAMA,EAAK,MAAOA,EAAK,QAASA,EAAK,OAAO,CAC9D,EAAE,GAAI,CACT"}